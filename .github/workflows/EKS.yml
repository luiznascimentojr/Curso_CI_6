name: Kubernetes

on:
  workflow_call: # sempre que algum worflow chamar

jobs:

  EKS: #nome do job
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: configurando credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ID_CHAVE_ACESSO }}
        aws-secret-access-key: ${{ secrets.CHAVE_SECRETA }}
        aws-region: us-east-2

    - name: clonado repositorio de infra
      run: git clone https://github.com/luiznascimentojr/Infra_CI_Kubernetes.git

    - name: HashiCorp-Setup-Instalando Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: HashiCorp-Iniciando TerraForm 
      run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog init
    #------ EXECUTAR AO FIM DOS TESTS 0---------------  
    # o terraform irá destruir toda a infraestrutura e a rotina será interrompida com um erro ao chegar em - run: return 1, impedindo que ela continue a ser executada.
    #- run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog destroy -auto-approve
    #- run: return 1
    
    - name: HashiCorp-Aprovando o Terraform -Ativo aprovação automatica 
      run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog apply -auto-approve 
      
    - name: Extrai a saida do TerraForm valor DB dentro do Main.tf
    - run: echo "$(terraform -chdir=Infra_CI_Kubernetes/env/Homolog output -raw IP_db)"
      id: URL

    - name: Instalando o Kubectl # utilizado para interagir com o cluster do Kubernetes.
      uses: Azure/setup-kubectl@v3

    - name: Obterndo as configurações necessárias para obtermos a informação no nosso Cluster.
      run: aws sts get-caller-identity
      
    - name: Criando o arquivo kubeconfig do Kubectl com a AWS CLI.      
      run: aws eks update-kubeconfig --region us-west-2 --name homolog2

    - name: Testando a conexão com o Cluster
      run: kubectl get svc

    - name: Variaveis de ambiente-Criando os Segredos/Colocando os Valores
    
    - run: kubectl delete secret dbhost --ignore-not-found
    - run: kubectl create secret generic dbhost --from-literal=HOST=${{ steps.URL.outputs.stdout }}

    - run: kubectl delete secret dbport --ignore-not-found
    - run: kubectl create secret generic dbport --from-literal=DBPORT=${{secrets.DBPORT}}

    - run: kubectl delete secret dbuser --ignore-not-found
    - run: kubectl create secret generic dbuser --from-literal=USER=${{secrets.DBUSER}}

    - run: kubectl delete secret dbpassword --ignore-not-found
    - run: kubectl create secret generic dbpassword --from-literal=PASSWORD=${{secrets.DBPASSWORD}}

    - run: kubectl delete secret dbname --ignore-not-found
    - run: kubectl create secret generic dbname --from-literal=DBNAME=${{secrets.DBNAME}}

    - run: kubectl delete secret port --ignore-not-found
    - run: kubectl create secret generic port --from-literal=PORT=8000

    - name: Criando a aplicação
    - run:  kubectl apply -f Infra_CI_Kubernetes/go.yaml

    - name: Atualiza a versao da imagem da aplicacao
    - run: kubectl apply -f Infra_CI_Kubernetes/go.yaml 
    - run: kubectl set image deployment/go-api go=leonardosartorello/go_ci:${{github.run_number}}

      
